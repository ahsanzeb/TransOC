(* ::Package:: *)

(************************************************************************)
(* This file was generated automatically by the Mathematica front end.  *)
(* It contains Initialization cells from a Notebook file, which         *)
(* typically will have the same name as this file except ending in      *)
(* ".nb" instead of ".m".                                               *)
(*                                                                      *)
(* This file is intended to be loaded into the Mathematica kernel using *)
(* the package loading commands Get or Needs.  Doing so is equivalent   *)
(* to using the Evaluate Initialization Cells menu command in the front *)
(* end.                                                                 *)
(*                                                                      *)
(* DO NOT EDIT THIS FILE.  This entire file is regenerated              *)
(* automatically each time the parent Notebook file is saved in the     *)
(* Mathematica front end.  Any changes you make to this file will be    *)
(* overwritten.                                                         *)
(************************************************************************)



(* D|Phi + A \[Rule] D'|Phi' +A' *)
(* active site number n interacting with D/Phi *)

mapHtDAc[N_,k_,n_]:=Module[{taba,tabb,listi,tablh,tabhl,xhl,xlh},
listi=comb[N,k];
taba={};tabb={};tablh={};tabhl={};
(*Print[" DiagHt4DA --------------"];*)
If[k>0,
Do[
(*Print[" DiagHt4DA,i=",i];*)
If[MemberQ[listi[[i]],n],
(* nth spin is up *)
AppendTo[taba,i];
,
(* nth spin is dn *)
AppendTo[tabb,i];
];
,{i,1,Length[listi]}];
,
tabb={1};
];
{taba,tabb}];




mapHtDAcc[N_,k_,n_]:=Module[{taba,tabb,listi,tablh,tabhl,xhl,xlh,listf,listiall},
listiall=comb[N,k];
tablh={};tabhl={};
(*Print[" DiagHt4DA --------------"];*)
If[k>0,
Do[
(*Print[" DiagHt4DA,i,n=",i," ",n];*)
listi=listiall[[i]];
If[MemberQ[listi,n],
(* nth spin is up *)
(* tlh: k--> k-1 *)
listf=Complement[listi,{n}];
(*Print["yes: listf = ",listf];*)
(* drop n from the list: k-1 up spins left*)
xlh=c[N,k-1]-Sum[c[N-listf[[p+1]],k-1-p],{p,0,k-2}];
AppendTo[tablh,{i,xlh}];
,
(*Print[" no: ,k, listi = ",k," ",listi];*)
(* nth spin is dn *)
(* thl: k--> k+1 *)
listf=Sort[Join[listi,{n}]];
xhl=c[N,k+1]-Sum[c[N-listf[[p+1]],k+1-p],{p,0,k}];
AppendTo[tabhl,{i,xhl}];
];
,{i,1,Length[listiall]}];
,
tabhl={{1,n}};
];
{tablh,tabhl}];

mkHtDAc[N_,m_,n_]:=Module[{m1,pntr,ntot,Hta,Htb,tab1,tab2,ind01,ind02,coora,coorb,Htsph,Htspl,
Htsplh,Htsphl,coorlh,coorhl,Htlh,Hthl,tablh,tabhl,pntr2,pntr3,ntot2,ntot3,ind2i,ind2f,ind3i,ind3f,m2,m3},
(* pointers for start index *)
m1=Min[m,N];(*m2=Min[m-1,N];m3=Min[m+1,N];*)
pntr=Insert[Table[Sum[c[N,j],{j,0,i}],{i,0,m1}],0,1];
ntot=pntr[[-1]];
Hta={};Htb={};
Do[
(* indices list of initial states *)
{tab1,tab2}=mapHtDAc[N,k,n];
ind01={pntr[[k+1]]+tab1}//Transpose;
ind02={pntr[[k+1]]+tab2}//Transpose;
(* th,tl: diagonal *)
If[Length[tab1]>0,
coora=Join[ind01,ind01,2];AppendTo[Hta,coora ];];
If[Length[tab2]>0,
coorb=Join[ind02,ind02,2];AppendTo[Htb,coorb ];];
,{k,0,m1}];
Htsph=SparseArray[Flatten[Hta,1]-> 1,{ntot,ntot}];
Htspl=SparseArray[Flatten[Htb,1]-> 1,{ntot,ntot}];
{Htsph,Htspl}
];




mkHtDAcc[N_,m_,n_]:=Module[{m1,pntr,ntot,Hta,Htb,tab1,tab2,coora,coorb,Htsph,Htspl,
Htsplh,Htsphl,coorlh,coorhl,Htlh,Hthl,tablh,tabhl,pntr2,pntr3,ntot2,ntot3,ind2i,ind2f,ind3i,ind3f,m2,m3},
(* pointers for start index *)
m1=Min[m,N];m2=Min[m-1,N];m3=Min[m+1,N];
pntr=Insert[Table[Sum[c[N,j],{j,0,i}],{i,0,m1}],0,1];
ntot=pntr[[-1]];
pntr2=Insert[Table[Sum[c[N,j],{j,0,i}],{i,0,m2}],0,1];
ntot2=pntr2[[-1]];
pntr3=Insert[Table[Sum[c[N,j],{j,0,i}],{i,0,m3}],0,1];
ntot3=pntr3[[-1]];
Hta={};Htb={};
Hthl={};Htlh={};
(*Print["xxxx "];*)
Do[
(* indices list of initial states *)
{tablh,tabhl}=mapHtDAcc[N,k,n];
(*Print["xxxx 1 "];*)
(* cross Homo-Lumo transitions; tlh,thl *)
If[Length[tablh]>0,
ind2i={pntr[[k+1]]+tablh[[All,1]]}//Transpose;
ind2f={pntr2[[k]]+tablh[[All,2]]}//Transpose;
coorlh=Join[ind2i,ind2f,2];AppendTo[Htlh,coorlh ];
];
If[Length[tabhl]>0,
ind3i={pntr[[k+1]]+tabhl[[All,1]]}//Transpose;
ind3f={pntr3[[k+2]]+tabhl[[All,2]]}//Transpose;
coorhl=Join[ind3i,ind3f,2];AppendTo[Hthl,coorhl ];
];
,{k,0,m1}];
If[m==0,ntot2=1];(* to trick psi.Ht.U instead of If statements there *)
Htsplh=SparseArray[Flatten[Htlh,1]-> 1,{ntot,ntot2}];
Htsphl=SparseArray[Flatten[Hthl,1]-> 1,{ntot,ntot3}];
{Htsplh,Htsphl}
];


